/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'io.confluent:kafka-json-schema-provider:7.5.2'
    testImplementation 'org.apache.kafka:kafka-streams-test-utils:7.5.2-ccs'
    testImplementation 'org.assertj:assertj-core:3.21.0'


    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.

    implementation("log4j:log4j:1.2.17")
    implementation("org.slf4j:slf4j-reload4j:2.0.9")

    implementation 'com.google.guava:guava:32.1.1-jre'

    implementation("com.google.code.gson:gson:2.10.1")

    implementation("io.confluent:kafka-avro-serializer:7.5.2")

    implementation("org.apache.kafka:kafka-streams:3.6.0")

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'kafka.streams.PaymentApplication'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    testLogging {
       events "failed", "passed", "skipped"
   }

    // afterTest { desc, result ->
    //     def output = "Class name: ${desc.className}, Test name: ${desc.name},  (Test status: ${result.resultType})"
    //     println( '\n' + output)
    // }
}

tasks.register('runUserBalance', JavaExec) {
    group = 'application'
    mainClass = 'kafka.streams.UserBalanceApplication'
    classpath = sourceSets.main.runtimeClasspath
}
